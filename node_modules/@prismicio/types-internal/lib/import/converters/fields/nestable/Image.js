"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageConverter = exports.convertImageView = void 0;
const common_1 = require("../../../../common");
const Objects_1 = require("../../../../utils/Objects");
function convertImageView(inputImage, image) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    // We can do that because anyway all properties being read
    const imageField = {
        ...inputImage,
        edit: {
            x: 0,
            y: 0,
            zoom: 1,
            ...inputImage.edit,
        },
        dimensions: (_a = inputImage.dimensions) !== null && _a !== void 0 ? _a : {},
    };
    return (0, Objects_1.withOptionals)({
        origin: {
            id: image.id,
            url: image.origin_url,
            // All images returned form Asset API should have width and height properties.
            width: (_b = image.width) !== null && _b !== void 0 ? _b : 0,
            height: (_c = image.height) !== null && _c !== void 0 ? _c : 0,
        },
        // All images returned form Asset API should have width and height properties.
        // Image width and height will be only applied if there are no constraints and user didn't overwrite it
        width: (_f = (_e = (_d = imageField === null || imageField === void 0 ? void 0 : imageField.dimensions) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : image.width) !== null && _f !== void 0 ? _f : 0,
        height: (_j = (_h = (_g = imageField === null || imageField === void 0 ? void 0 : imageField.dimensions) === null || _g === void 0 ? void 0 : _g.height) !== null && _h !== void 0 ? _h : image.height) !== null && _j !== void 0 ? _j : 0,
        // If edit is not provided, we crop constraint width and height from the left upper corner.
        // WARN: If constraints are greater than image dimensions cut outside the image (background will fill extra space).
        edit: {
            zoom: (_l = (_k = imageField.edit) === null || _k === void 0 ? void 0 : _k.zoom) !== null && _l !== void 0 ? _l : 1,
            crop: {
                x: (_o = (_m = imageField.edit) === null || _m === void 0 ? void 0 : _m.x) !== null && _o !== void 0 ? _o : 0,
                y: (_q = (_p = imageField.edit) === null || _p === void 0 ? void 0 : _p.y) !== null && _q !== void 0 ? _q : 0,
            },
            background: (_s = (_r = imageField.edit) === null || _r === void 0 ? void 0 : _r.background) !== null && _s !== void 0 ? _s : (image.extension === "png" ? "transparent" : "#ffffff"),
        },
        url: image.url,
    }, [
        ["alt", (imageField === null || imageField === void 0 ? void 0 : imageField.alt) || image.alt],
        ["credits", (imageField === null || imageField === void 0 ? void 0 : imageField.copyright) || image.credits],
    ]);
}
exports.convertImageView = convertImageView;
function convertThumbnails(imageField, assets) {
    return Object.entries(imageField.thumbnails).reduce((acc, [thumbnailName, thumbnail]) => {
        return {
            ...acc,
            [thumbnailName]: convertImageView(thumbnail, (0, common_1.getAssetOrThrow)(assets)(thumbnail.id)),
        };
    }, {});
}
// All assets from `imageField` must be present in `assets`
// If not then function will throw an error
const imageConverter = (imageField, assets) => {
    if (!imageField)
        return;
    return {
        ...convertImageView(imageField, (0, common_1.getAssetOrThrow)(assets)(imageField.id)),
        thumbnails: convertThumbnails(imageField, assets),
        __TYPE__: "ImageContent",
    };
};
exports.imageConverter = imageConverter;
