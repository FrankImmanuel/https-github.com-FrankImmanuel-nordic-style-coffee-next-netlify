"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedSliceId = exports.SharedSliceIdValidationError = void 0;
const tslib_1 = require("tslib");
const E = (0, tslib_1.__importStar)(require("fp-ts/Either"));
const function_1 = require("fp-ts/function");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const UUID_1 = require("../../../../../../common/UUID");
const validators_1 = require("../../../../../../validators");
const baseErrorText = "Slice id must be a non empty string matching the following pattern 'slice_type$uuid'";
exports.SharedSliceIdValidationError = {
    Base: baseErrorText,
    IncorrectUUID: (uuid) => `Incorrect UUID: '${uuid}' - ${baseErrorText}`,
    IncorrectSliceType: (sliceType) => `Incorrect slice_type: '${sliceType}' - ${baseErrorText}`,
};
exports.SharedSliceId = new t.Type("SharedSliceId", (u) => {
    if (typeof u !== "string") {
        return false;
    }
    const [sliceName, uuid] = u.split("$");
    return validators_1.NonEmptyString.is(sliceName) && UUID_1.UUID.is(uuid);
}, (u, c) => (0, function_1.pipe)(validators_1.NonEmptyString.validate(u, c), E.mapLeft((errors) => errors.map((error) => ({
    ...error,
    message: exports.SharedSliceIdValidationError.Base,
}))), E.chain((sliceId) => {
    const [sliceName, uuid] = sliceId.split("$");
    return (0, function_1.pipe)(t.tuple([validators_1.NonEmptyString, UUID_1.UUID]).validate([sliceName, uuid], c), E.mapLeft((errors) => errors.map((error) => {
        const tupleErrorContext = error.context[error.context.length - 1];
        return {
            ...error,
            context: [
                ...error.context.slice(0, -1), // We don't want the tuple decoder error context
            ],
            message: (tupleErrorContext === null || tupleErrorContext === void 0 ? void 0 : tupleErrorContext.key) === "0"
                ? exports.SharedSliceIdValidationError.IncorrectSliceType(sliceName)
                : exports.SharedSliceIdValidationError.IncorrectUUID(uuid),
        };
    })));
}), E.map(([sliceName, uuid]) => `${sliceName}$${uuid}`)), (sliceId) => sliceId);
