"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findImportSharedSliceDuplicateIds = exports.extractSupportedSlices = void 0;
const tslib_1 = require("tslib");
const A = (0, tslib_1.__importStar)(require("fp-ts/Array"));
const function_1 = require("fp-ts/function");
const O = (0, tslib_1.__importStar)(require("fp-ts/Option"));
const customtypes_1 = require("../../../../customtypes");
// Extracts all supported slices from the static slices object
// For now we only support the SharedSlice, if we want to support other slices in the future, we have to add them here
const extractSupportedSlices = (staticSlices) => {
    var _a, _b;
    return (0, function_1.pipe)(Object.values((_b = (_a = staticSlices.config) === null || _a === void 0 ? void 0 : _a.choices) !== null && _b !== void 0 ? _b : {}).map((slice) => (0, function_1.pipe)(customtypes_1.SharedSlice.decode(slice), O.fromEither)), A.compact);
};
exports.extractSupportedSlices = extractSupportedSlices;
const findImportSharedSliceDuplicateIds = (slices) => {
    const duplicatesMap = slices.reduce((acc, { id }) => {
        var _a;
        if (id) {
            const currentNumOfDuplicates = (_a = acc[id]) !== null && _a !== void 0 ? _a : 0;
            return {
                ...acc,
                [id]: acc[id] === undefined ? 0 : currentNumOfDuplicates + 1,
            };
        }
        return acc;
    }, {});
    return Object.entries(duplicatesMap).flatMap(([id, numOfDuplicates]) => {
        if (numOfDuplicates > 0) {
            return [id];
        }
        return [];
    });
};
exports.findImportSharedSliceDuplicateIds = findImportSharedSliceDuplicateIds;
