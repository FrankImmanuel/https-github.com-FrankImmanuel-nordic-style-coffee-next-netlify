import type { StaticWidget } from "../../../customtypes";
import { ImportGroup } from "./ImportGroup";
import { ImportSlices } from "./ImportSlices";
import { ImportNestable } from "./nestable";
export declare type ImportField = ImportSlices | ImportNestable | ImportGroup;
export declare const ImportField: {
    is(u: unknown): u is ImportField;
    decode: (field: StaticWidget) => (content: unknown) => {
        codec: import("io-ts").Type<{
            type: "Boolean";
            value: boolean | null;
        }, boolean | undefined, unknown> | import("io-ts").Type<{
            type: "Color";
            value: `#${string}` | null;
        }, string | undefined, unknown> | import("io-ts").Type<{
            type: "Date";
            value: Date | null;
        }, Date | undefined, unknown> | import("io-ts").Type<{
            type: "Embed";
            value: {
                embed_url: string;
            } | null;
        }, {
            embed_url: string;
        } | undefined, unknown> | import("io-ts").Type<{
            type: "GeoPoint";
            value: {
                latitude: number;
                longitude: number;
            } | null;
        }, {
            latitude: number;
            longitude: number;
        } | undefined, unknown> | import("io-ts").Type<{
            type: "Image";
            value: import("./nestable").ImageFieldWithThumbnails | null;
        }, import("./nestable").ImageFieldWithThumbnails | undefined, unknown> | import("io-ts").Type<{
            type: "Link";
            value: ({
                link_type: "Web";
                url: string;
            } & {
                target?: string;
            }) | {
                link_type: "Document";
                id: string;
            } | {
                link_type: "Media";
                id: string;
            } | null;
        }, {
            link_type: "Document" | "Web" | "Media";
        } | undefined, unknown> | import("io-ts").Type<{
            type: "StructuredText";
            value: import("./nestable").ImportBlock[] | null;
        }, import("./nestable").ImportBlock[] | undefined, unknown> | import("io-ts").Type<{
            type: "Number";
            value: number | null;
        }, number | undefined, unknown> | import("io-ts").Type<{
            type: "Select";
            value: string | null;
        }, string | undefined, unknown> | import("io-ts").Type<{
            type: "Text";
            value: string | null;
        }, string | undefined, unknown> | import("io-ts").Type<{
            type: "Timestamp";
            value: Date | null;
        }, Date | undefined, unknown>;
        result: import("fp-ts/lib/Either").Left<import("io-ts").Errors> | import("fp-ts/lib/Either").Right<{
            type: "Timestamp";
            value: Date | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Text";
            value: string | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Select";
            value: string | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Number";
            value: number | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "StructuredText";
            value: import("./nestable").ImportBlock[] | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Link";
            value: ({
                link_type: "Web";
                url: string;
            } & {
                target?: string;
            }) | {
                link_type: "Document";
                id: string;
            } | {
                link_type: "Media";
                id: string;
            } | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Image";
            value: import("./nestable").ImageFieldWithThumbnails | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "GeoPoint";
            value: {
                latitude: number;
                longitude: number;
            } | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Embed";
            value: {
                embed_url: string;
            } | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Date";
            value: Date | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Color";
            value: `#${string}` | null;
        }> | import("fp-ts/lib/Either").Right<{
            type: "Boolean";
            value: boolean | null;
        }>;
    } | {
        codec: import("io-ts").Type<{
            type: "Slices";
            value: import("./ImportSlices/SharedSlice").SharedSlice[] | null;
        }, import("./ImportSlices/SharedSlice").SharedSlice[] | undefined, unknown>;
        result: import("io-ts").Validation<{
            type: "Slices";
            value: import("./ImportSlices/SharedSlice").SharedSlice[] | null;
        }>;
    } | {
        codec: import("io-ts").Type<{
            type: "Group";
            value: import("./RepeatableZoneItem").RepeatableZoneItem[] | null;
        }, import("./RepeatableZoneItem").RepeatableZoneItem[] | undefined, unknown>;
        result: import("io-ts").Validation<{
            type: "Group";
            value: import("./RepeatableZoneItem").RepeatableZoneItem[] | null;
        }>;
    };
};
