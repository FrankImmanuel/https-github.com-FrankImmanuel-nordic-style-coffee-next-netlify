"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportRichText = void 0;
const tslib_1 = require("tslib");
const E = (0, tslib_1.__importStar)(require("fp-ts/Either"));
const function_1 = require("fp-ts/function");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const validators_1 = require("../../../../../validators");
const function_2 = require("../../../../../validators/function");
const ImportContent_1 = require("../../ImportContent");
const ImportBlock_1 = require("./ImportBlock");
const ImportRichText = (customType) => {
    var _a, _b, _c, _d;
    const single = (_b = (_a = customType === null || customType === void 0 ? void 0 : customType.config) === null || _a === void 0 ? void 0 : _a.single) === null || _b === void 0 ? void 0 : _b.split(",");
    const multi = (_d = (_c = customType === null || customType === void 0 ? void 0 : customType.config) === null || _c === void 0 ? void 0 : _c.multi) === null || _d === void 0 ? void 0 : _d.split(",");
    const allowedBlockTypes = multi || single;
    const isSingleBlockAllowed = multi === undefined && single !== undefined;
    const BlockCodec = (0, ImportBlock_1.ImportBlock)(allowedBlockTypes !== null && allowedBlockTypes !== void 0 ? allowedBlockTypes : []);
    const RichTextArrayCodec = (0, function_2.withCustomError)(t.array(BlockCodec), () => "Rich text field must be an array");
    return (0, ImportContent_1.ImportContent)("StructuredText", (0, validators_1.EmptyArrayOrElse)(new t.ArrayType(RichTextArrayCodec.name, (u) => RichTextArrayCodec.is(u), (u, c) => {
        if (allowedBlockTypes === undefined) {
            throw new Error("Invalid custom type for the rich text field: the model is missing a 'single' or 'multi' field defining a list of allowed block types");
        }
        return (0, function_1.pipe)(RichTextArrayCodec.validate(u, c), E.chain((blocks) => {
            if (isSingleBlockAllowed && blocks.length > 1) {
                return t.failure(blocks, c, "This field only allows one block");
            }
            return t.success(blocks);
        }));
    }, t.identity, BlockCodec)));
};
exports.ImportRichText = ImportRichText;
