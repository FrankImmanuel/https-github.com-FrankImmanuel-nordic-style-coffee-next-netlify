"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportImage = void 0;
const tslib_1 = require("tslib");
const Either_1 = require("fp-ts/Either");
const function_1 = require("fp-ts/function");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const validators_1 = require("../../../../../validators");
const function_2 = require("../../../../../validators/function");
const ImportContent_1 = require("../../ImportContent");
const default_1 = require("./default");
const merge_1 = require("./merge");
const validators_2 = require("./validators");
/* For code clarity, the output of this validator will be simplified
 *
 *  Input -> type ImageAPIV2 = ImportImageView & ImportThumbnails
 *  Output -> type ImageWithThumbnails ðŸ‘‡
 */
const ImageFieldCodec = (field) => {
    const ImageCodec = (0, validators_2.ImportImageWithThumbnails)(field);
    return new t.Type("ImageField", (u) => ImageCodec.is(u), (u, ctx) => (0, function_1.pipe)(ImageCodec.validate(u, ctx), (0, Either_1.map)((imageApiV2) => {
        var _a;
        const { id, dimensions, edit, copyright, alt, ...thumbnails } = imageApiV2;
        return {
            ...(0, merge_1.mergeImageViewWithCtConstraints)(imageApiV2, imageApiV2, (_a = field === null || field === void 0 ? void 0 : field.config) === null || _a === void 0 ? void 0 : _a.constraint),
            thumbnails: (0, merge_1.mergeThumbnailsWithCtConstraints)(thumbnails, imageApiV2, field),
        };
    })), t.identity);
};
const ImportImage = (field) => (0, ImportContent_1.ImportContent)("Image", (0, function_2.withCustomError)((0, validators_1.DefaultOrElse)((0, default_1.defaultImportImage)(field))(ImageFieldCodec(field)), () => "An image field must be an object"));
exports.ImportImage = ImportImage;
(0, tslib_1.__exportStar)(require("./model"), exports);
