"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportNestable = void 0;
const Boolean_1 = require("./Boolean");
const Color_1 = require("./Color");
const Date_1 = require("./Date");
const Embed_1 = require("./Embed");
const GeoPoint_1 = require("./GeoPoint");
const Image_1 = require("./Image");
const ImportRichText_1 = require("./ImportRichText");
const Link_1 = require("./Link");
const Number_1 = require("./Number");
const Select_1 = require("./Select");
const Text_1 = require("./Text");
const Timestamp_1 = require("./Timestamp");
const getCodecOrThrow = (field) => {
    switch (field.type) {
        case "Boolean":
            return Boolean_1.ImportBoolean;
        case "Color":
            return Color_1.ImportColor;
        case "Number":
            return (0, Number_1.ImportNumber)(field);
        case "Select":
            return (0, Select_1.ImportSelect)(field);
        case "Text":
            return Text_1.ImportText;
        case "Date":
            return Date_1.ImportDate;
        case "Timestamp":
            return Timestamp_1.ImportTimestamp;
        case "Embed":
            return Embed_1.ImportEmbed;
        case "Link":
            return Link_1.ImportLink;
        case "Image":
            return (0, Image_1.ImportImage)(field);
        case "GeoPoint":
            return GeoPoint_1.ImportGeoPoint;
        case "StructuredText":
            return (0, ImportRichText_1.ImportRichText)(field);
        default:
            throw new Error(`Unsupported type of nestable field ${field.type}`);
    }
};
exports.ImportNestable = {
    is(u) {
        return (Boolean_1.ImportBoolean.is(u) ||
            Color_1.ImportColor.is(u) ||
            (0, Number_1.ImportNumber)().is(u) ||
            (0, Select_1.ImportSelect)().is(u) ||
            Text_1.ImportText.is(u) ||
            Date_1.ImportDate.is(u) ||
            Timestamp_1.ImportTimestamp.is(u) ||
            Embed_1.ImportEmbed.is(u) ||
            Link_1.ImportLink.is(u) ||
            GeoPoint_1.ImportGeoPoint.is(u) ||
            (0, Image_1.ImportImage)().is(u) ||
            (0, ImportRichText_1.ImportRichText)().is(u));
    },
    decode: (field) => {
        return (content) => {
            const codec = getCodecOrThrow(field);
            return {
                codec,
                result: codec.decode(content),
            };
        };
    },
    getCodec: getCodecOrThrow,
};
