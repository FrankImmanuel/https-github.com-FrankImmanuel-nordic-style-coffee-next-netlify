import * as t from "io-ts";
import type { Thumbnail } from "../../../../../customtypes";
export declare const ImportImageViewShape: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
}>, t.PartialC<{
    dimensions: t.PartialC<{
        width: t.NumberC;
        height: t.NumberC;
    }>;
    edit: t.PartialC<{
        x: t.NumberC;
        y: t.NumberC;
        zoom: t.NumberC;
        background: t.StringC;
    }>;
    copyright: t.UnionC<[t.StringC, t.NullC]>;
    alt: t.UnionC<[t.StringC, t.NullC]>;
}>]>;
export declare const ImportImageView: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
}>, t.PartialC<{
    dimensions: t.PartialC<{
        width: t.NumberC;
        height: t.NumberC;
    }>;
    edit: t.PartialC<{
        x: t.NumberC;
        y: t.NumberC;
        zoom: t.NumberC;
        background: t.StringC;
    }>;
    copyright: t.UnionC<[t.StringC, t.NullC]>;
    alt: t.UnionC<[t.StringC, t.NullC]>;
}>]>;
export declare type ImportImageView = t.TypeOf<typeof ImportImageView>;
declare const ImportThumbnails: (thumbnails: readonly Thumbnail[]) => t.Type<Record<string, {
    id: string;
} & {
    dimensions?: {
        width?: number;
        height?: number;
    };
    edit?: {
        x?: number;
        y?: number;
        zoom?: number;
        background?: string;
    };
    copyright?: string | null;
    alt?: string | null;
}>, Record<string, {
    id: string;
} & {
    dimensions?: {
        width?: number;
        height?: number;
    };
    edit?: {
        x?: number;
        y?: number;
        zoom?: number;
        background?: string;
    };
    copyright?: string | null;
    alt?: string | null;
}>, unknown>;
export declare type ImportThumbnails = t.TypeOf<ReturnType<typeof ImportThumbnails>>;
export declare const ImportImageWithThumbnails: (def?: ({
    type: "Image";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string;
        constraint?: {
            width?: number | null;
            height?: number | null;
        };
        thumbnails?: readonly ({
            name: string;
        } & {
            width?: number | null;
            height?: number | null;
        })[];
    };
}) | undefined) => t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    id: t.StringC;
}>, t.PartialC<{
    dimensions: t.PartialC<{
        width: t.NumberC;
        height: t.NumberC;
    }>;
    edit: t.PartialC<{
        x: t.NumberC;
        y: t.NumberC;
        zoom: t.NumberC;
        background: t.StringC;
    }>;
    copyright: t.UnionC<[t.StringC, t.NullC]>;
    alt: t.UnionC<[t.StringC, t.NullC]>;
}>]>, t.Type<Record<string, {
    id: string;
} & {
    dimensions?: {
        width?: number;
        height?: number;
    };
    edit?: {
        x?: number;
        y?: number;
        zoom?: number;
        background?: string;
    };
    copyright?: string | null;
    alt?: string | null;
}>, Record<string, {
    id: string;
} & {
    dimensions?: {
        width?: number;
        height?: number;
    };
    edit?: {
        x?: number;
        y?: number;
        zoom?: number;
        background?: string;
    };
    copyright?: string | null;
    alt?: string | null;
}>, unknown>]>;
export {};
