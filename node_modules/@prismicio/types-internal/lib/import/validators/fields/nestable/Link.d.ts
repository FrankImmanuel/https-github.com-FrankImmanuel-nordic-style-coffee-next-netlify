import type { TypeOf } from "io-ts";
import * as t from "io-ts";
declare const WebLink: t.ExactC<t.IntersectionC<[t.TypeC<{
    link_type: t.LiteralC<"Web">;
    url: t.StringC;
}>, t.PartialC<{
    target: t.StringC;
}>]>>;
export declare type WebLink = t.TypeOf<typeof WebLink>;
declare const DocumentLink: t.ExactC<t.TypeC<{
    link_type: t.LiteralC<"Document">;
    id: t.Type<string, string, unknown>;
}>>;
export declare type DocumentLink = t.TypeOf<typeof DocumentLink>;
declare const MediaLink: t.ExactC<t.TypeC<{
    link_type: t.LiteralC<"Media">;
    id: t.StringC;
}>>;
export declare type MediaLink = t.TypeOf<typeof MediaLink>;
export declare const Link: t.Type<({
    link_type: "Web";
    url: string;
} & {
    target?: string;
}) | {
    link_type: "Document";
    id: string;
} | {
    link_type: "Media";
    id: string;
}, {
    link_type: "Document" | "Web" | "Media";
}, unknown>;
export declare type Link = TypeOf<typeof Link>;
export declare const ImportLink: t.Type<{
    type: "Link";
    value: ({
        link_type: "Web";
        url: string;
    } & {
        target?: string;
    }) | {
        link_type: "Document";
        id: string;
    } | {
        link_type: "Media";
        id: string;
    } | null;
}, {
    link_type: "Document" | "Web" | "Media";
} | undefined, unknown>;
export declare type ImportLink = TypeOf<typeof ImportLink>;
export {};
