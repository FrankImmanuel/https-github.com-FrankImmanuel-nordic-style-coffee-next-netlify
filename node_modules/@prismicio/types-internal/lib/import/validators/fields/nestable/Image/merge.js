"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeThumbnailsWithCtConstraints = exports.mergeImageViewWithCtConstraints = void 0;
/* This function merges user input with custom type constraints.
 *  If a thumbnails' data are missing (`image`) then the default is used (`defaultImage`)
 */
const mergeImageViewWithCtConstraints = (image, defaultImage, constraints) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    const background = (_a = image === null || image === void 0 ? void 0 : image.edit) === null || _a === void 0 ? void 0 : _a.background;
    const width = (_d = (_b = constraints === null || constraints === void 0 ? void 0 : constraints.width) !== null && _b !== void 0 ? _b : (_c = image === null || image === void 0 ? void 0 : image.dimensions) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : (_e = defaultImage === null || defaultImage === void 0 ? void 0 : defaultImage.dimensions) === null || _e === void 0 ? void 0 : _e.width;
    const height = (_h = (_f = constraints === null || constraints === void 0 ? void 0 : constraints.height) !== null && _f !== void 0 ? _f : (_g = image === null || image === void 0 ? void 0 : image.dimensions) === null || _g === void 0 ? void 0 : _g.height) !== null && _h !== void 0 ? _h : (_j = defaultImage === null || defaultImage === void 0 ? void 0 : defaultImage.dimensions) === null || _j === void 0 ? void 0 : _j.height;
    const alt = image === null || image === void 0 ? void 0 : image.alt;
    const copyright = image === null || image === void 0 ? void 0 : image.copyright;
    return {
        id: (_k = image === null || image === void 0 ? void 0 : image.id) !== null && _k !== void 0 ? _k : defaultImage === null || defaultImage === void 0 ? void 0 : defaultImage.id,
        edit: {
            x: (_m = (_l = image === null || image === void 0 ? void 0 : image.edit) === null || _l === void 0 ? void 0 : _l.x) !== null && _m !== void 0 ? _m : 0,
            y: (_p = (_o = image === null || image === void 0 ? void 0 : image.edit) === null || _o === void 0 ? void 0 : _o.y) !== null && _p !== void 0 ? _p : 0,
            zoom: (_r = (_q = image === null || image === void 0 ? void 0 : image.edit) === null || _q === void 0 ? void 0 : _q.zoom) !== null && _r !== void 0 ? _r : 1,
            ...(background !== undefined ? { background } : {}),
        },
        dimensions: {
            ...(width !== undefined ? { width } : {}),
            ...(height !== undefined ? { height } : {}),
        },
        ...(alt !== undefined ? { alt } : {}),
        ...(copyright !== undefined ? { copyright } : {}),
    };
};
exports.mergeImageViewWithCtConstraints = mergeImageViewWithCtConstraints;
/* This function handles each thumbnail defined in the custom type.
 *
 *  For each of them it merges the user input with custom type constraints.
 *
 *  If a thumbnail is missing, the data from the default image is used.
 */
const mergeThumbnailsWithCtConstraints = (thumbnails, defaultImage, field) => {
    var _a, _b, _c;
    return (_c = (_b = (_a = field === null || field === void 0 ? void 0 : field.config) === null || _a === void 0 ? void 0 : _a.thumbnails) === null || _b === void 0 ? void 0 : _b.reduce((acc, thumbnail) => ({
        ...acc,
        [thumbnail.name]: (0, exports.mergeImageViewWithCtConstraints)(thumbnails[thumbnail.name], defaultImage, thumbnail),
    }), {})) !== null && _c !== void 0 ? _c : {};
};
exports.mergeThumbnailsWithCtConstraints = mergeThumbnailsWithCtConstraints;
