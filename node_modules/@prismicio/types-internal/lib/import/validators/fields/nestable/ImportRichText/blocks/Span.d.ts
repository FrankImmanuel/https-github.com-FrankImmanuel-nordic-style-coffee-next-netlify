import * as t from "io-ts";
declare const SpanType: t.UnionC<[t.LiteralC<"hyperlink">, t.KeyofC<{
    strong: null;
    em: null;
}>, t.LiteralC<"label">]>;
export declare type SpanType = t.TypeOf<typeof SpanType>;
declare const SpanShape: t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"hyperlink">;
}>, t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
}>, t.TypeC<{
    data: t.Type<({
        link_type: "Web";
        url: string;
    } & {
        target?: string;
    }) | {
        link_type: "Document";
        id: string;
    } | {
        link_type: "Media";
        id: string;
    }, {
        link_type: "Document" | "Web" | "Media";
    }, unknown>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.KeyofC<{
        strong: null;
        em: null;
    }>;
}>, t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"label">;
    data: t.ExactC<t.TypeC<{
        label: t.StringC;
    }>>;
}>, t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
}>]>>]>;
export declare type Span = t.TypeOf<typeof SpanShape>;
export declare const Span: t.Type<({
    type: "hyperlink";
} & {
    start: number;
    end: number;
} & {
    data: ({
        link_type: "Web";
        url: string;
    } & {
        target?: string;
    }) | {
        link_type: "Document";
        id: string;
    } | {
        link_type: "Media";
        id: string;
    };
}) | ({
    type: "strong" | "em";
} & {
    start: number;
    end: number;
}) | ({
    type: "label";
    data: {
        label: string;
    };
} & {
    start: number;
    end: number;
}), {
    type: "label" | "strong" | "em" | "hyperlink";
}, unknown>;
export {};
