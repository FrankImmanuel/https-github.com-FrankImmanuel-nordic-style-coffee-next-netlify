import * as t from "io-ts";
export declare const ImportGroupValue: (groupCustomType?: ({
    type: "Group";
} & {
    fieldset?: string | null | undefined;
    icon?: string;
    description?: string;
    config?: {
        label?: string | null | undefined;
        repeat?: boolean;
        fields?: {
            [x: string]: ({
                type: "Boolean";
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: "Color";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: "Date";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Embed";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: "GeoPoint";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Image";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: readonly ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: "IntegrationFields";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: "Link";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: readonly string[];
                    masks?: readonly string[];
                    tags?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Number";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "Range";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "StructuredText";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Select";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: readonly string[];
                };
            }) | ({
                type: "Separator";
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Text";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: "Timestamp";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            });
        };
    };
}) | undefined) => t.Type<import("./RepeatableZoneItem").RepeatableZoneItem[], import("./RepeatableZoneItem").RepeatableZoneItem[], unknown>;
export declare const ImportGroup: (groupCustomType?: ({
    type: "Group";
} & {
    fieldset?: string | null | undefined;
    icon?: string;
    description?: string;
    config?: {
        label?: string | null | undefined;
        repeat?: boolean;
        fields?: {
            [x: string]: ({
                type: "Boolean";
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: "Color";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: "Date";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Embed";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: "GeoPoint";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Image";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: readonly ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: "IntegrationFields";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: "Link";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: readonly string[];
                    masks?: readonly string[];
                    tags?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Number";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "Range";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "StructuredText";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Select";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: readonly string[];
                };
            }) | ({
                type: "Separator";
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Text";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: "Timestamp";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            });
        };
    };
}) | undefined) => t.Type<{
    type: "Group";
    value: import("./RepeatableZoneItem").RepeatableZoneItem[] | null;
}, import("./RepeatableZoneItem").RepeatableZoneItem[] | undefined, unknown>;
export declare type ImportGroup = t.TypeOf<ReturnType<typeof ImportGroup>>;
