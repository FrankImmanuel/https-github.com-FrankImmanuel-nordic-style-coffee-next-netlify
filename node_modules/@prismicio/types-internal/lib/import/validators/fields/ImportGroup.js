"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportGroup = exports.ImportGroupValue = void 0;
const tslib_1 = require("tslib");
const E = (0, tslib_1.__importStar)(require("fp-ts/Either"));
const function_1 = require("fp-ts/function");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const validators_1 = require("../../../validators");
const function_2 = require("../../../validators/function");
const ImportContent_1 = require("./ImportContent");
const RepeatableZone_1 = require("./RepeatableZone");
const ImportGroupValue = (groupCustomType) => {
    var _a, _b;
    const fieldsModel = (_b = (_a = groupCustomType === null || groupCustomType === void 0 ? void 0 : groupCustomType.config) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : {};
    const groupArrayCodec = (0, RepeatableZone_1.RepeatableZone)(fieldsModel);
    return (0, function_2.withCustomError)(new t.Type(groupArrayCodec.name, groupArrayCodec.is, (u, c) => (0, function_1.pipe)(groupArrayCodec.validate(u, c), E.chain((groups) => {
        var _a;
        if (((_a = groupCustomType === null || groupCustomType === void 0 ? void 0 : groupCustomType.config) === null || _a === void 0 ? void 0 : _a.repeat) === false &&
            groups.length > 1) {
            return t.failure(groups, c, "The custom type for this group field does not allow multiple group items");
        }
        return t.success(groups);
    })), t.identity), () => "The group field value must be an array");
};
exports.ImportGroupValue = ImportGroupValue;
const ImportGroup = (groupCustomType) => (0, ImportContent_1.ImportContent)("Group", (0, validators_1.EmptyArrayOrElse)((0, exports.ImportGroupValue)(groupCustomType)));
exports.ImportGroup = ImportGroup;
