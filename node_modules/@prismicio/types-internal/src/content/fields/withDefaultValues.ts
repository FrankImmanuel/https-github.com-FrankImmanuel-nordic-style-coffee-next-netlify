import type { NestableWidget } from "../../customtypes"
import type { NestableContent } from "./nestable"
import { NestableContentDefaultValue } from "./nestable"

export function withDefaultNestableContentValues(
	customType: Record<string, NestableWidget>,
	content: Record<string, NestableContent>,
): Record<string, NestableContent> {
	return Object.entries(customType).reduce<Record<string, NestableContent>>(
		(updatedContent, [widgetKey, widgetDef]) => {
			if (content[widgetKey] === undefined) {
				const defaultValue = NestableContentDefaultValue(widgetDef)
				return defaultValue !== undefined
					? {
							...updatedContent,
							[widgetKey]: defaultValue,
					  }
					: updatedContent
			}

			return updatedContent
		},
		content,
	)
}

export function repeatableContentWithDefaultNestableContentValues<
	T extends {
		value: [string, NestableContent][]
	},
>(fields: Record<string, NestableWidget>, content: T[]): T[] {
	const groupKeys = Object.entries(fields)
	return content.map((contentItem) => {
		return groupKeys.reduce((updatedContentItem, [key, fieldDef]) => {
			if (!contentItem.value.find(([_key]) => _key === key)) {
				const defaultValue = NestableContentDefaultValue(fieldDef)
				return {
					...updatedContentItem,
					value: [
						...updatedContentItem.value,
						...(defaultValue ? [[key, defaultValue]] : []),
					],
				}
			}
			return updatedContentItem
		}, contentItem)
	})
}
